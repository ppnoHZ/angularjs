{"name":"Angularjs","tagline":"","body":"# Service\r\n5种方式创建服务:\r\n\r\n> **factory**  最常见的创建服务的方式。\r\n\r\n> **service**  注册一个支持构造函数的服务。\r\n\r\n> **constant** 将已存在的变量注册为服务,可以注入到config配置函数中, \r\n\r\n> **value**    当$get方法返回的是一个常量的时候使用，和constant创建的服务类似,但是不可注入到config\r\n\r\n> **provider**\r\n\r\n\r\n## factory\r\n最快速的创建服务的方式。\r\n### params：\r\n> **name**(string)\r\n服务的名称。\r\n\r\n> **fun**(object、array、function)\r\n创建服务实例的时候被调用，可返回简单的类型，函数，对象等任意类型的数据。(同value()函数类似)\r\n\r\n### example：\r\n```javascript\r\n\tangular.module('app')\r\n\t.factory('testFactroy',function(){\r\n\t\treturn {\r\n\t\t\tget:function(username){\r\n\t\t\t\t\t\t\r\n\t\t}\r\n\t})\r\n```\r\n\t\r\n## service\r\n注册一个支持构造函数的服务，允许我们为服务对象注册一个构造函数。service()函数在穿件实例时通过new关键字来实例化服务对象。\r\n### params:\r\n\t\r\n>name\r\n服务名称\r\n\r\n>constructor\r\n函数:通过这个方法来实例化服务对象。\r\n\r\n### example：\r\n\r\n```javascript\r\n\tvar Person =function($http){\r\n\t\tthis.getName=function(){\r\n\t\t\treturn $http({method:'GET',url:'api/user'});\r\n\t\t\t\t\t\r\n\t\t}\r\n\t}\r\n\tangular.service('personService',Person);\r\n```\r\n## constant\r\n将一个已经存在的**变量**注册为服务,并将其注入到应用的其他部分中。\r\n<mark>可以注入到config中,不能被装饰器拦截。</mark>\r\n### params:\r\n>name(字符串) 服务名称\r\n\r\n>value(常量)\r\n需要注册的常量的值\r\n\r\n### example:\r\n```javascript\r\napp.constant('constValue','testConstantService')\r\napp.constant('constService', {\r\n    name: 'zdd',\r\n    age: 11,\r\n    getName: function () {\r\n        return this.name;\r\n    }\r\n})\r\n```\r\n\r\n## value\r\n\r\n如果服务的$get方法返回的是一个常量,就没有必要定义一个包含复杂功能的完整服务,可以通过value()函数方便的注册服务。\r\n\r\n### params\r\n> name(字符串)\r\n\r\n> value(值)\r\n\r\n### example\r\n```javascript\r\napp.value('valueService', '123')\r\napp.value('valueObject',{\r\n        name: 'zdd',\r\n        getName: function () {\r\n            return this.name;\r\n        }\r\n    }\r\n)\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}